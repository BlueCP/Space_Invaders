
langproc.elf:     file format elf32-littlenios2
langproc.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010020

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00010020 paddr 0x00010020 align 2**12
         filesz 0x00000bf4 memsz 0x00000bf4 flags r-x
    LOAD off    0x00001c14 vaddr 0x00010c14 paddr 0x00010cb4 align 2**12
         filesz 0x000000a0 memsz 0x000000a0 flags rw-
    LOAD off    0x00001d54 vaddr 0x00010d54 paddr 0x00010d54 align 2**12
         filesz 0x00000000 memsz 0x00000010 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00010000  00010000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00010020  00010020  00001cb4  2**0
                  CONTENTS
  2 .text         000009ac  00010020  00010020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000248  000109cc  000109cc  000019cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000000a0  00010c14  00010cb4  00001c14  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000010  00010d54  00010d54  00001d54  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory 00000000  00010d64  00010d64  00001cb4  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00001cb4  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000002a0  00000000  00000000  00001cd8  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0000292b  00000000  00000000  00001f78  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001075  00000000  00000000  000048a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000011c1  00000000  00000000  00005918  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000003c0  00000000  00000000  00006adc  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00000c53  00000000  00000000  00006e9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000718  00000000  00000000  00007aef  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  00008208  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000110  00000000  00000000  00008218  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0000957e  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  00009581  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00009584  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00009585  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000009  00000000  00000000  00009586  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000009  00000000  00000000  0000958f  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000009  00000000  00000000  00009598  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000c  00000000  00000000  000095a1  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000021  00000000  00000000  000095ad  2**0
                  CONTENTS, READONLY
 26 .jdi          00004a20  00000000  00000000  000095ce  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     00071012  00000000  00000000  0000dfee  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00010000 l    d  .entry	00000000 .entry
00010020 l    d  .exceptions	00000000 .exceptions
00010020 l    d  .text	00000000 .text
000109cc l    d  .rodata	00000000 .rodata
00010c14 l    d  .rwdata	00000000 .rwdata
00010d54 l    d  .bss	00000000 .bss
00010d64 l    d  .onchip_memory	00000000 .onchip_memory
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../langproc_bsp//obj/HAL/src/crt0.o
00010058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world_small.c
00010a24 l     O .rodata	00000062 CSWTCH.5
00000000 l    df *ABS*	00000000 alt_getchar.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00010c14 l     O .rwdata	0000002c accelerometer_spi
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_up_avalon_accelerometer_spi.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
0001088c l     F .text	00000008 alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00010484 g     F .text	0000002c alt_main
00010cb4 g       *ABS*	00000000 __flash_rwdata_start
00010110 g     F .text	0000024c read_chars
00010c98 g     O .rwdata	00000004 jtag_uart
00010978 g     F .text	00000008 altera_nios2_gen2_irq_init
00010000 g     F .entry	0000000c __reset
00010780 g     F .text	00000058 alt_up_accelerometer_spi_read_x_axis
00010020 g       *ABS*	00000000 __flash_exceptions_start
00010d60 g     O .bss	00000004 errno
00010d58 g     O .bss	00000004 alt_argv
00018c98 g       *ABS*	00000000 _gp
00010c40 g     O .rwdata	00000030 alt_fd_list
00010900 g     F .text	00000074 alt_find_dev
00010698 g     F .text	0000005c altera_avalon_jtag_uart_read
00010c9c g     O .rwdata	00000004 alt_max_fd
00010d64 g       *ABS*	00000000 __bss_end
00010360 g     F .text	00000044 alt_getchar
00010c70 g     O .rwdata	00000028 alt_dev_null
00010888 g     F .text	00000004 alt_dcache_flush_all
00010cb4 g       *ABS*	00000000 __ram_rwdata_end
00010000 g       *ABS*	00000000 __alt_mem_onchip_memory
00010ca0 g     O .rwdata	00000008 alt_dev_list
00010c14 g       *ABS*	00000000 __ram_rodata_end
00010d64 g       *ABS*	00000000 end
00020000 g       *ABS*	00000000 __alt_stack_pointer
000106f4 g     F .text	00000034 altera_avalon_jtag_uart_write
000104b0 g     F .text	00000170 alt_printf
00010020 g     F .text	0000003c _start
00010688 g     F .text	00000010 alt_sys_init
00010730 g     F .text	00000014 alt_up_accelerometer_spi_read_address_register
00010c14 g       *ABS*	00000000 __ram_rwdata_start
000109cc g       *ABS*	00000000 __ram_rodata_start
000107d8 g     F .text	00000058 alt_up_accelerometer_spi_read_y_axis
00010980 g     F .text	00000030 memcmp
00010d64 g       *ABS*	00000000 __alt_stack_base
00010a88 g     O .rodata	00000180 SegmentCharacters
00010894 g     F .text	0000006c alt_dev_llist_insert
00010d54 g       *ABS*	00000000 __bss_start
0001035c g     F .text	00000004 main
00010d54 g     O .bss	00000004 alt_envp
00010cb0 g     O .rwdata	00000004 alt_errno
000109cc g       *ABS*	00000000 __flash_rodata_start
00010668 g     F .text	00000020 alt_irq_init
00010d5c g     O .bss	00000004 alt_argc
00010ca8 g     O .rwdata	00000008 alt_fs_list
00010020 g       *ABS*	00000000 __ram_exceptions_start
00010728 g     F .text	00000008 alt_up_accelerometer_spi_open_dev
0001005c g     F .text	000000b4 get_input
00010cb4 g       *ABS*	00000000 _edata
00010d64 g       *ABS*	00000000 _end
00010020 g       *ABS*	00000000 __ram_exceptions_end
00010830 g     F .text	00000058 alt_up_accelerometer_spi_read_z_axis
00020000 g       *ABS*	00000000 __alt_data_end
0001000c g       .entry	00000000 _exit
00010744 g     F .text	00000020 alt_up_accelerometer_spi_read
00010764 g     F .text	0000001c alt_up_accelerometer_spi_write
000109b0 g     F .text	0000001c strlen
00010620 g     F .text	00000048 alt_putchar
00010974 g     F .text	00000004 alt_icache_flush_all
000103a4 g     F .text	000000e0 alt_load



Disassembly of section .entry:

00010000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   10000:	00400074 	movhi	at,1
    ori r1, r1, %lo(_start)
   10004:	08400814 	ori	at,at,32
    jmp r1
   10008:	0800683a 	jmp	at

0001000c <_exit>:
	...

Disassembly of section .text:

00010020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   10020:	06c000b4 	movhi	sp,2
    ori sp, sp, %lo(__alt_stack_pointer)
   10024:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
   10028:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
   1002c:	d6a32614 	ori	gp,gp,35992
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   10030:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
   10034:	10835514 	ori	r2,r2,3412

    movhi r3, %hi(__bss_end)
   10038:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
   1003c:	18c35914 	ori	r3,r3,3428

    beq r2, r3, 1f
   10040:	10c00326 	beq	r2,r3,10050 <_start+0x30>

0:
    stw zero, (r2)
   10044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   10048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   1004c:	10fffd36 	bltu	r2,r3,10044 <__alt_data_end+0xffff0044>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   10050:	00103a40 	call	103a4 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   10054:	00104840 	call	10484 <alt_main>

00010058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   10058:	003fff06 	br	10058 <__alt_data_end+0xffff0058>

0001005c <get_input>:
#include "system.h"
#include "altera_up_avalon_accelerometer_spi.h"
#define CHARLIM 256		// Maximum character length of what the user places in memory.  Increase to allow longer sequences
#define QUITLETTER '~' 		// Letter to kill all processing

char get_input(char curr, int *length, char *text, int *running) {
   1005c:	2005883a 	mov	r2,r4
	if(curr == '\n') return curr;								// If the line is empty, return nothing.
   10060:	21003fcc 	andi	r4,r4,255
   10064:	2100201c 	xori	r4,r4,128
   10068:	213fe004 	addi	r4,r4,-128
   1006c:	00c00284 	movi	r3,10
   10070:	20c02626 	beq	r4,r3,1010c <get_input+0xb0>
#include "system.h"
#include "altera_up_avalon_accelerometer_spi.h"
#define CHARLIM 256		// Maximum character length of what the user places in memory.  Increase to allow longer sequences
#define QUITLETTER '~' 		// Letter to kill all processing

char get_input(char curr, int *length, char *text, int *running) {
   10074:	defff804 	addi	sp,sp,-32
   10078:	dd800615 	stw	r22,24(sp)
   1007c:	dd400515 	stw	r21,20(sp)
   10080:	dd000415 	stw	r20,16(sp)
   10084:	dcc00315 	stw	r19,12(sp)
   10088:	dc800215 	stw	r18,8(sp)
   1008c:	dc400115 	stw	r17,4(sp)
   10090:	dc000015 	stw	r16,0(sp)
   10094:	dfc00715 	stw	ra,28(sp)
   10098:	3829883a 	mov	r20,r7
   1009c:	3025883a 	mov	r18,r6
   100a0:	2827883a 	mov	r19,r5
	if(curr == '\n') return curr;								// If the line is empty, return nothing.
   100a4:	3023883a 	mov	r17,r6
	int idx = 0;										// Keep track of how many characters have been sent down for later printing
	char newCurr = curr;

	while (newCurr != EOF && newCurr != '\n'){						// Keep reading characters until we get to the end of the line
   100a8:	057fffc4 	movi	r21,-1
   100ac:	1821883a 	mov	r16,r3
		if (newCurr == QUITLETTER) { *running = 0; }					// If quitting letter is encountered, setting running to 0
   100b0:	05801f84 	movi	r22,126
char get_input(char curr, int *length, char *text, int *running) {
	if(curr == '\n') return curr;								// If the line is empty, return nothing.
	int idx = 0;										// Keep track of how many characters have been sent down for later printing
	char newCurr = curr;

	while (newCurr != EOF && newCurr != '\n'){						// Keep reading characters until we get to the end of the line
   100b4:	10c03fcc 	andi	r3,r2,255
   100b8:	18c0201c 	xori	r3,r3,128
   100bc:	18ffe004 	addi	r3,r3,-128
   100c0:	8c89c83a 	sub	r4,r17,r18
   100c4:	1d400726 	beq	r3,r21,100e4 <get_input+0x88>
   100c8:	1c000626 	beq	r3,r16,100e4 <get_input+0x88>
		if (newCurr == QUITLETTER) { *running = 0; }					// If quitting letter is encountered, setting running to 0
   100cc:	1d80011e 	bne	r3,r22,100d4 <get_input+0x78>
   100d0:	a0000015 	stw	zero,0(r20)
		text[idx] = newCurr;								// Add the next letter to the text buffer
   100d4:	88800005 	stb	r2,0(r17)
		idx++;										// Keep track of the number of characters read
		newCurr = alt_getchar();							// Get the next character
   100d8:	00103600 	call	10360 <alt_getchar>
   100dc:	8c400044 	addi	r17,r17,1
   100e0:	003ff406 	br	100b4 <__alt_data_end+0xffff00b4>
	}
	*length = idx;
   100e4:	99000015 	stw	r4,0(r19)

	return newCurr;
}
   100e8:	dfc00717 	ldw	ra,28(sp)
   100ec:	dd800617 	ldw	r22,24(sp)
   100f0:	dd400517 	ldw	r21,20(sp)
   100f4:	dd000417 	ldw	r20,16(sp)
   100f8:	dcc00317 	ldw	r19,12(sp)
   100fc:	dc800217 	ldw	r18,8(sp)
   10100:	dc400117 	ldw	r17,4(sp)
   10104:	dc000017 	ldw	r16,0(sp)
   10108:	dec00804 	addi	sp,sp,32
   1010c:	f800283a 	ret

00010110 <read_chars>:
	0b01110000, /* } */
	0b00000001, /* ~ */
	0b00000000, /* (del) */
};

int read_chars() {
   10110:	deff7604 	addi	sp,sp,-552
	int lives = 0;
	volatile int * BTN_ptr = (int *)BUTTON_BASE;
	volatile int * SW_ptr = (int *)SWITCH_BASE;
    alt_32 x_read;
    alt_up_accelerometer_spi_dev * acc_dev;
    acc_dev = alt_up_accelerometer_spi_open_dev("/dev/accelerometer_spi");
   10114:	01000074 	movhi	r4,1
	0b01110000, /* } */
	0b00000001, /* ~ */
	0b00000000, /* (del) */
};

int read_chars() {
   10118:	dc408415 	stw	r17,528(sp)
	int lives = 0;
	volatile int * BTN_ptr = (int *)BUTTON_BASE;
	volatile int * SW_ptr = (int *)SWITCH_BASE;
    alt_32 x_read;
    alt_up_accelerometer_spi_dev * acc_dev;
    acc_dev = alt_up_accelerometer_spi_open_dev("/dev/accelerometer_spi");
   1011c:	21027304 	addi	r4,r4,2508

int read_chars() {
	char text[2*CHARLIM];									// The buffer for the printing text
	char prevLetter = '!';
	int length = 0;
	int running = 1;
   10120:	04400044 	movi	r17,1
	0b01110000, /* } */
	0b00000001, /* ~ */
	0b00000000, /* (del) */
};

int read_chars() {
   10124:	dfc08915 	stw	ra,548(sp)
   10128:	dd408815 	stw	r21,544(sp)
   1012c:	dd008715 	stw	r20,540(sp)
   10130:	dcc08615 	stw	r19,536(sp)
   10134:	dc808515 	stw	r18,532(sp)
   10138:	dc008315 	stw	r16,524(sp)
	char text[2*CHARLIM];									// The buffer for the printing text
	char prevLetter = '!';
	int length = 0;
   1013c:	d8008215 	stw	zero,520(sp)
	int running = 1;
   10140:	dc408115 	stw	r17,516(sp)
	int lives = 0;
	volatile int * BTN_ptr = (int *)BUTTON_BASE;
	volatile int * SW_ptr = (int *)SWITCH_BASE;
    alt_32 x_read;
    alt_up_accelerometer_spi_dev * acc_dev;
    acc_dev = alt_up_accelerometer_spi_open_dev("/dev/accelerometer_spi");
   10144:	00107280 	call	10728 <alt_up_accelerometer_spi_open_dev>
    if (acc_dev == NULL) { // if return 1, check if the spi ip name is "accelerometer_spi"
   10148:	10007a26 	beq	r2,zero,10334 <read_chars+0x224>
			default:
				lives = 0b0;
				break;
			}
			alt_printf("Lives %s", &text[4]);
			IOWR_ALTERA_AVALON_PIO_DATA(LED_BASE, lives);
   1014c:	044000b4 	movhi	r17,2
   10150:	04800074 	movhi	r18,1
		prevLetter = get_input(prevLetter, &length, text, &running);		// Process input text
		switch (text[0]){

		case 'r':
			alt_up_accelerometer_spi_read_x_axis(acc_dev, & x_read);
			alt_printf("%x|%x|%x", *(BTN_ptr), *(SW_ptr), x_read);
   10154:	04c000b4 	movhi	r19,2
   10158:	050000b4 	movhi	r20,2
   1015c:	1021883a 	mov	r16,r2
			default:
				lives = 0b0;
				break;
			}
			alt_printf("Lives %s", &text[4]);
			IOWR_ALTERA_AVALON_PIO_DATA(LED_BASE, lives);
   10160:	8c442404 	addi	r17,r17,4240
   10164:	94828904 	addi	r18,r18,2596
		prevLetter = get_input(prevLetter, &length, text, &running);		// Process input text
		switch (text[0]){

		case 'r':
			alt_up_accelerometer_spi_read_x_axis(acc_dev, & x_read);
			alt_printf("%x|%x|%x", *(BTN_ptr), *(SW_ptr), x_read);
   10168:	9cc42804 	addi	r19,r19,4256
   1016c:	a5042004 	addi	r20,r20,4224
    acc_dev = alt_up_accelerometer_spi_open_dev("/dev/accelerometer_spi");
    if (acc_dev == NULL) { // if return 1, check if the spi ip name is "accelerometer_spi"
        return 1;
    }

	while (running) {									// Keep running until QUITLETTER is encountered
   10170:	d8808117 	ldw	r2,516(sp)
   10174:	10007026 	beq	r2,zero,10338 <read_chars+0x228>
		prevLetter = alt_getchar();							// Extract the first character (and create a hold until one arrives)
   10178:	00103600 	call	10360 <alt_getchar>
		prevLetter = get_input(prevLetter, &length, text, &running);		// Process input text
   1017c:	11003fcc 	andi	r4,r2,255
   10180:	2100201c 	xori	r4,r4,128
   10184:	d9c08104 	addi	r7,sp,516
   10188:	d80d883a 	mov	r6,sp
   1018c:	d9408204 	addi	r5,sp,520
   10190:	213fe004 	addi	r4,r4,-128
   10194:	001005c0 	call	1005c <get_input>
		switch (text[0]){
   10198:	d8800007 	ldb	r2,0(sp)
   1019c:	00c01b04 	movi	r3,108
   101a0:	10c05026 	beq	r2,r3,102e4 <read_chars+0x1d4>
   101a4:	00c01c84 	movi	r3,114
   101a8:	10c04426 	beq	r2,r3,102bc <read_chars+0x1ac>
   101ac:	00c01a04 	movi	r3,104
   101b0:	10c05c1e 	bne	r2,r3,10324 <read_chars+0x214>
			alt_up_accelerometer_spi_read_x_axis(acc_dev, & x_read);
			alt_printf("%x|%x|%x", *(BTN_ptr), *(SW_ptr), x_read);
			break;

		case 'h':
			alt_printf("Hex Updated.");
   101b4:	01000074 	movhi	r4,1
   101b8:	21027c04 	addi	r4,r4,2544
   101bc:	00104b00 	call	104b0 <alt_printf>
			IOWR_ALTERA_AVALON_PIO_DATA(HEX5_BASE, ~SegmentCharacters[text[2] - ' ']);
   101c0:	d8800087 	ldb	r2,2(sp)
   101c4:	01000074 	movhi	r4,1
   101c8:	2102a204 	addi	r4,r4,2696
   101cc:	10bff804 	addi	r2,r2,-32
   101d0:	1085883a 	add	r2,r2,r2
   101d4:	1085883a 	add	r2,r2,r2
   101d8:	2085883a 	add	r2,r4,r2
   101dc:	10800017 	ldw	r2,0(r2)
   101e0:	00c000b4 	movhi	r3,2
   101e4:	18c40804 	addi	r3,r3,4128
   101e8:	0084303a 	nor	r2,zero,r2
   101ec:	18800035 	stwio	r2,0(r3)
			IOWR_ALTERA_AVALON_PIO_DATA(HEX4_BASE, ~SegmentCharacters[text[3] - ' ']);
   101f0:	d88000c7 	ldb	r2,3(sp)
   101f4:	00c000b4 	movhi	r3,2
   101f8:	18c40c04 	addi	r3,r3,4144
   101fc:	10bff804 	addi	r2,r2,-32
   10200:	1085883a 	add	r2,r2,r2
   10204:	1085883a 	add	r2,r2,r2
   10208:	2085883a 	add	r2,r4,r2
   1020c:	10800017 	ldw	r2,0(r2)
   10210:	0084303a 	nor	r2,zero,r2
   10214:	18800035 	stwio	r2,0(r3)
			IOWR_ALTERA_AVALON_PIO_DATA(HEX3_BASE, ~SegmentCharacters[text[4] - ' ']);
   10218:	d8c00107 	ldb	r3,4(sp)
   1021c:	18fff804 	addi	r3,r3,-32
   10220:	18c7883a 	add	r3,r3,r3
   10224:	18c7883a 	add	r3,r3,r3
   10228:	20c7883a 	add	r3,r4,r3
   1022c:	18800017 	ldw	r2,0(r3)
   10230:	00c000b4 	movhi	r3,2
   10234:	18c41004 	addi	r3,r3,4160
   10238:	0084303a 	nor	r2,zero,r2
   1023c:	18800035 	stwio	r2,0(r3)
			IOWR_ALTERA_AVALON_PIO_DATA(HEX2_BASE, ~SegmentCharacters[text[5] - ' ']);
   10240:	d8c00147 	ldb	r3,5(sp)
   10244:	18fff804 	addi	r3,r3,-32
   10248:	18c7883a 	add	r3,r3,r3
   1024c:	18c7883a 	add	r3,r3,r3
   10250:	20c7883a 	add	r3,r4,r3
   10254:	18800017 	ldw	r2,0(r3)
   10258:	00c000b4 	movhi	r3,2
   1025c:	18c41404 	addi	r3,r3,4176
   10260:	0084303a 	nor	r2,zero,r2
   10264:	18800035 	stwio	r2,0(r3)
			IOWR_ALTERA_AVALON_PIO_DATA(HEX1_BASE, ~SegmentCharacters[text[6] - ' ']);
   10268:	d8c00187 	ldb	r3,6(sp)
   1026c:	18fff804 	addi	r3,r3,-32
   10270:	18c7883a 	add	r3,r3,r3
   10274:	18c7883a 	add	r3,r3,r3
   10278:	20c7883a 	add	r3,r4,r3
   1027c:	18800017 	ldw	r2,0(r3)
   10280:	00c000b4 	movhi	r3,2
   10284:	18c41804 	addi	r3,r3,4192
   10288:	0084303a 	nor	r2,zero,r2
   1028c:	18800035 	stwio	r2,0(r3)
			IOWR_ALTERA_AVALON_PIO_DATA(HEX0_BASE, ~SegmentCharacters[text[7] - ' ']);
   10290:	d88001c7 	ldb	r2,7(sp)
   10294:	00c000b4 	movhi	r3,2
   10298:	18c41c04 	addi	r3,r3,4208
   1029c:	10bff804 	addi	r2,r2,-32
   102a0:	1085883a 	add	r2,r2,r2
   102a4:	1085883a 	add	r2,r2,r2
   102a8:	2085883a 	add	r2,r4,r2
   102ac:	10800017 	ldw	r2,0(r2)
   102b0:	0084303a 	nor	r2,zero,r2
   102b4:	18800035 	stwio	r2,0(r3)
			break;
   102b8:	003fad06 	br	10170 <__alt_data_end+0xffff0170>
		prevLetter = alt_getchar();							// Extract the first character (and create a hold until one arrives)
		prevLetter = get_input(prevLetter, &length, text, &running);		// Process input text
		switch (text[0]){

		case 'r':
			alt_up_accelerometer_spi_read_x_axis(acc_dev, & x_read);
   102bc:	d9408004 	addi	r5,sp,512
   102c0:	8009883a 	mov	r4,r16
   102c4:	00107800 	call	10780 <alt_up_accelerometer_spi_read_x_axis>
			alt_printf("%x|%x|%x", *(BTN_ptr), *(SW_ptr), x_read);
   102c8:	99400017 	ldw	r5,0(r19)
   102cc:	d9c08017 	ldw	r7,512(sp)
   102d0:	a1800017 	ldw	r6,0(r20)
   102d4:	01000074 	movhi	r4,1
   102d8:	21027904 	addi	r4,r4,2532
   102dc:	00104b00 	call	104b0 <alt_printf>
			break;
   102e0:	003fa306 	br	10170 <__alt_data_end+0xffff0170>
   102e4:	d8800103 	ldbu	r2,4(sp)
   102e8:	00c00c04 	movi	r3,48
   102ec:	10bff3c4 	addi	r2,r2,-49
   102f0:	10803fcc 	andi	r2,r2,255
   102f4:	18800436 	bltu	r3,r2,10308 <read_chars+0x1f8>
   102f8:	1085883a 	add	r2,r2,r2
   102fc:	9085883a 	add	r2,r18,r2
   10300:	1540000f 	ldh	r21,0(r2)
   10304:	00000106 	br	1030c <read_chars+0x1fc>
			IOWR_ALTERA_AVALON_PIO_DATA(HEX1_BASE, ~SegmentCharacters[text[6] - ' ']);
			IOWR_ALTERA_AVALON_PIO_DATA(HEX0_BASE, ~SegmentCharacters[text[7] - ' ']);
			break;

		case 'l':
			switch(text[4]){
   10308:	002b883a 	mov	r21,zero
				break;
			default:
				lives = 0b0;
				break;
			}
			alt_printf("Lives %s", &text[4]);
   1030c:	01000074 	movhi	r4,1
   10310:	d9400104 	addi	r5,sp,4
   10314:	21028004 	addi	r4,r4,2560
   10318:	00104b00 	call	104b0 <alt_printf>
			IOWR_ALTERA_AVALON_PIO_DATA(LED_BASE, lives);
   1031c:	8d400035 	stwio	r21,0(r17)
			break;
   10320:	003f9306 	br	10170 <__alt_data_end+0xffff0170>

		default:
			alt_printf("Unrecognised Command");
   10324:	01000074 	movhi	r4,1
   10328:	21028304 	addi	r4,r4,2572
   1032c:	00104b00 	call	104b0 <alt_printf>
			break;
   10330:	003f8f06 	br	10170 <__alt_data_end+0xffff0170>
	volatile int * SW_ptr = (int *)SWITCH_BASE;
    alt_32 x_read;
    alt_up_accelerometer_spi_dev * acc_dev;
    acc_dev = alt_up_accelerometer_spi_open_dev("/dev/accelerometer_spi");
    if (acc_dev == NULL) { // if return 1, check if the spi ip name is "accelerometer_spi"
        return 1;
   10334:	8805883a 	mov	r2,r17
			break;
		}
	}

	return 0;
}
   10338:	dfc08917 	ldw	ra,548(sp)
   1033c:	dd408817 	ldw	r21,544(sp)
   10340:	dd008717 	ldw	r20,540(sp)
   10344:	dcc08617 	ldw	r19,536(sp)
   10348:	dc808517 	ldw	r18,532(sp)
   1034c:	dc408417 	ldw	r17,528(sp)
   10350:	dc008317 	ldw	r16,524(sp)
   10354:	dec08a04 	addi	sp,sp,552
   10358:	f800283a 	ret

0001035c <main>:

int main() {
	return read_chars();
   1035c:	00101101 	jmpi	10110 <read_chars>

00010360 <alt_getchar>:
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_READ_EXTERNS(ALT_STDIN_DEV);
    char c;

    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
   10360:	00800074 	movhi	r2,1
   10364:	10831004 	addi	r2,r2,3136
   10368:	11c00217 	ldw	r7,8(r2)
 * Uses the ALT_DRIVER_READ() macro to call directly to driver if available.
 * Otherwise, uses newlib provided getchar() routine.
 */
int 
alt_getchar(void)
{
   1036c:	defffe04 	addi	sp,sp,-8
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_READ_EXTERNS(ALT_STDIN_DEV);
    char c;

    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
   10370:	01000074 	movhi	r4,1
   10374:	01800044 	movi	r6,1
   10378:	d80b883a 	mov	r5,sp
   1037c:	21032604 	addi	r4,r4,3224
 * Uses the ALT_DRIVER_READ() macro to call directly to driver if available.
 * Otherwise, uses newlib provided getchar() routine.
 */
int 
alt_getchar(void)
{
   10380:	dfc00115 	stw	ra,4(sp)
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_READ_EXTERNS(ALT_STDIN_DEV);
    char c;

    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
   10384:	00106980 	call	10698 <altera_avalon_jtag_uart_read>
   10388:	0080020e 	bge	zero,r2,10394 <alt_getchar+0x34>
        return -1;
    }
    return c;
   1038c:	d8800007 	ldb	r2,0(sp)
   10390:	00000106 	br	10398 <alt_getchar+0x38>
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_READ_EXTERNS(ALT_STDIN_DEV);
    char c;

    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
        return -1;
   10394:	00bfffc4 	movi	r2,-1
    return c;
#else
    return getchar();
#endif
#endif
}
   10398:	dfc00117 	ldw	ra,4(sp)
   1039c:	dec00204 	addi	sp,sp,8
   103a0:	f800283a 	ret

000103a4 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   103a4:	deffff04 	addi	sp,sp,-4
   103a8:	01000074 	movhi	r4,1
   103ac:	01400074 	movhi	r5,1
   103b0:	dfc00015 	stw	ra,0(sp)
   103b4:	21030504 	addi	r4,r4,3092
   103b8:	29432d04 	addi	r5,r5,3252

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   103bc:	2140061e 	bne	r4,r5,103d8 <alt_load+0x34>
   103c0:	01000074 	movhi	r4,1
   103c4:	01400074 	movhi	r5,1
   103c8:	21000804 	addi	r4,r4,32
   103cc:	29400804 	addi	r5,r5,32
   103d0:	2140121e 	bne	r4,r5,1041c <alt_load+0x78>
   103d4:	00000b06 	br	10404 <alt_load+0x60>
   103d8:	00c00074 	movhi	r3,1
   103dc:	18c32d04 	addi	r3,r3,3252
   103e0:	1907c83a 	sub	r3,r3,r4
   103e4:	0005883a 	mov	r2,zero
  {
    while( to != end )
   103e8:	10fff526 	beq	r2,r3,103c0 <__alt_data_end+0xffff03c0>
    {
      *to++ = *from++;
   103ec:	114f883a 	add	r7,r2,r5
   103f0:	39c00017 	ldw	r7,0(r7)
   103f4:	110d883a 	add	r6,r2,r4
   103f8:	10800104 	addi	r2,r2,4
   103fc:	31c00015 	stw	r7,0(r6)
   10400:	003ff906 	br	103e8 <__alt_data_end+0xffff03e8>
   10404:	01000074 	movhi	r4,1
   10408:	01400074 	movhi	r5,1
   1040c:	21027304 	addi	r4,r4,2508
   10410:	29427304 	addi	r5,r5,2508

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   10414:	2140101e 	bne	r4,r5,10458 <alt_load+0xb4>
   10418:	00000b06 	br	10448 <alt_load+0xa4>
   1041c:	00c00074 	movhi	r3,1
   10420:	18c00804 	addi	r3,r3,32
   10424:	1907c83a 	sub	r3,r3,r4
   10428:	0005883a 	mov	r2,zero
  {
    while( to != end )
   1042c:	10fff526 	beq	r2,r3,10404 <__alt_data_end+0xffff0404>
    {
      *to++ = *from++;
   10430:	114f883a 	add	r7,r2,r5
   10434:	39c00017 	ldw	r7,0(r7)
   10438:	110d883a 	add	r6,r2,r4
   1043c:	10800104 	addi	r2,r2,4
   10440:	31c00015 	stw	r7,0(r6)
   10444:	003ff906 	br	1042c <__alt_data_end+0xffff042c>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   10448:	00108880 	call	10888 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
   1044c:	dfc00017 	ldw	ra,0(sp)
   10450:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
   10454:	00109741 	jmpi	10974 <alt_icache_flush_all>
   10458:	00c00074 	movhi	r3,1
   1045c:	18c30504 	addi	r3,r3,3092
   10460:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   10464:	0005883a 	mov	r2,zero
  {
    while( to != end )
   10468:	18bff726 	beq	r3,r2,10448 <__alt_data_end+0xffff0448>
    {
      *to++ = *from++;
   1046c:	114f883a 	add	r7,r2,r5
   10470:	39c00017 	ldw	r7,0(r7)
   10474:	110d883a 	add	r6,r2,r4
   10478:	10800104 	addi	r2,r2,4
   1047c:	31c00015 	stw	r7,0(r6)
   10480:	003ff906 	br	10468 <__alt_data_end+0xffff0468>

00010484 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   10484:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   10488:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   1048c:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   10490:	00106680 	call	10668 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   10494:	00106880 	call	10688 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
   10498:	d1a02f17 	ldw	r6,-32580(gp)
   1049c:	d1603017 	ldw	r5,-32576(gp)
   104a0:	d1203117 	ldw	r4,-32572(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
   104a4:	dfc00017 	ldw	ra,0(sp)
   104a8:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
   104ac:	001035c1 	jmpi	1035c <main>

000104b0 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
   104b0:	defff204 	addi	sp,sp,-56
   104b4:	2005883a 	mov	r2,r4
   104b8:	dfc00a15 	stw	ra,40(sp)
   104bc:	df000915 	stw	fp,36(sp)
   104c0:	ddc00815 	stw	r23,32(sp)
   104c4:	dd800715 	stw	r22,28(sp)
   104c8:	dd400615 	stw	r21,24(sp)
   104cc:	dd000515 	stw	r20,20(sp)
   104d0:	dcc00415 	stw	r19,16(sp)
   104d4:	dc800315 	stw	r18,12(sp)
   104d8:	dc400215 	stw	r17,8(sp)
   104dc:	dc000115 	stw	r16,4(sp)
   104e0:	d9400b15 	stw	r5,44(sp)
   104e4:	d9800c15 	stw	r6,48(sp)
   104e8:	d9c00d15 	stw	r7,52(sp)
    w = fmt;
    while ((c = *w++) != 0)
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
   104ec:	04000944 	movi	r16,37
 */
void 
alt_printf(const char* fmt, ... )
{
	va_list args;
	va_start(args, fmt);
   104f0:	dd400b04 	addi	r21,sp,44
                if (c == '%')
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
   104f4:	048018c4 	movi	r18,99
                {
                    int v = va_arg(args, int);
                    alt_putchar(v);
                }
                else if (c == 'x')
   104f8:	04c01e04 	movi	r19,120
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
   104fc:	05001cc4 	movi	r20,115
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
   10500:	11000007 	ldb	r4,0(r2)
   10504:	20003a26 	beq	r4,zero,105f0 <alt_printf+0x140>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
   10508:	24000226 	beq	r4,r16,10514 <alt_printf+0x64>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
   1050c:	14400044 	addi	r17,r2,1
   10510:	00001406 	br	10564 <alt_printf+0xb4>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
   10514:	14400084 	addi	r17,r2,2
   10518:	10800047 	ldb	r2,1(r2)
   1051c:	10003426 	beq	r2,zero,105f0 <alt_printf+0x140>
            {
                if (c == '%')
   10520:	1400021e 	bne	r2,r16,1052c <alt_printf+0x7c>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
   10524:	8009883a 	mov	r4,r16
   10528:	00000e06 	br	10564 <alt_printf+0xb4>
                } 
                else if (c == 'c')
   1052c:	1480051e 	bne	r2,r18,10544 <alt_printf+0x94>
                {
                    int v = va_arg(args, int);
                    alt_putchar(v);
   10530:	a9000017 	ldw	r4,0(r21)
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
                {
                    int v = va_arg(args, int);
   10534:	ad800104 	addi	r22,r21,4
   10538:	b02b883a 	mov	r21,r22
                    alt_putchar(v);
   1053c:	00106200 	call	10620 <alt_putchar>
   10540:	00002906 	br	105e8 <alt_printf+0x138>
                }
                else if (c == 'x')
   10544:	14c0201e 	bne	r2,r19,105c8 <alt_printf+0x118>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
   10548:	adc00017 	ldw	r23,0(r21)
   1054c:	ad400104 	addi	r21,r21,4
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
   10550:	b8000326 	beq	r23,zero,10560 <alt_printf+0xb0>
   10554:	05800704 	movi	r22,28
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
   10558:	00c003c4 	movi	r3,15
   1055c:	00000306 	br	1056c <alt_printf+0xbc>
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
                    {
                        alt_putchar('0');
   10560:	01000c04 	movi	r4,48
   10564:	00106200 	call	10620 <alt_putchar>
                        continue;
   10568:	00001f06 	br	105e8 <alt_printf+0x138>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
   1056c:	1d84983a 	sll	r2,r3,r22
   10570:	15c4703a 	and	r2,r2,r23
   10574:	1000021e 	bne	r2,zero,10580 <alt_printf+0xd0>
                        digit_shift -= 4;
   10578:	b5bfff04 	addi	r22,r22,-4
   1057c:	003ffb06 	br	1056c <__alt_data_end+0xffff056c>

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
   10580:	070003c4 	movi	fp,15
                        if (digit <= 9)
   10584:	00c00244 	movi	r3,9
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
   10588:	b0001716 	blt	r22,zero,105e8 <alt_printf+0x138>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
   1058c:	e588983a 	sll	r4,fp,r22
   10590:	25c8703a 	and	r4,r4,r23
   10594:	2588d83a 	srl	r4,r4,r22
                        if (digit <= 9)
   10598:	19000236 	bltu	r3,r4,105a4 <alt_printf+0xf4>
                            c = '0' + digit;
   1059c:	21000c04 	addi	r4,r4,48
   105a0:	00000106 	br	105a8 <alt_printf+0xf8>
                        else
                            c = 'a' + digit - 10;
   105a4:	210015c4 	addi	r4,r4,87
                        alt_putchar(c);
   105a8:	21003fcc 	andi	r4,r4,255
   105ac:	2100201c 	xori	r4,r4,128
   105b0:	213fe004 	addi	r4,r4,-128
   105b4:	d8c00015 	stw	r3,0(sp)
   105b8:	00106200 	call	10620 <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
   105bc:	b5bfff04 	addi	r22,r22,-4
   105c0:	d8c00017 	ldw	r3,0(sp)
   105c4:	003ff006 	br	10588 <__alt_data_end+0xffff0588>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
   105c8:	1500071e 	bne	r2,r20,105e8 <alt_printf+0x138>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
   105cc:	ad800017 	ldw	r22,0(r21)
   105d0:	ad400104 	addi	r21,r21,4

                    while(*s)
   105d4:	b1000007 	ldb	r4,0(r22)
   105d8:	20000326 	beq	r4,zero,105e8 <alt_printf+0x138>
                      alt_putchar(*s++);
   105dc:	b5800044 	addi	r22,r22,1
   105e0:	00106200 	call	10620 <alt_putchar>
   105e4:	003ffb06 	br	105d4 <__alt_data_end+0xffff05d4>
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
                {
                    int v = va_arg(args, int);
   105e8:	8805883a 	mov	r2,r17
   105ec:	003fc406 	br	10500 <__alt_data_end+0xffff0500>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
   105f0:	dfc00a17 	ldw	ra,40(sp)
   105f4:	df000917 	ldw	fp,36(sp)
   105f8:	ddc00817 	ldw	r23,32(sp)
   105fc:	dd800717 	ldw	r22,28(sp)
   10600:	dd400617 	ldw	r21,24(sp)
   10604:	dd000517 	ldw	r20,20(sp)
   10608:	dcc00417 	ldw	r19,16(sp)
   1060c:	dc800317 	ldw	r18,12(sp)
   10610:	dc400217 	ldw	r17,8(sp)
   10614:	dc000117 	ldw	r16,4(sp)
   10618:	dec00e04 	addi	sp,sp,56
   1061c:	f800283a 	ret

00010620 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
   10620:	defffd04 	addi	sp,sp,-12
   10624:	dc000115 	stw	r16,4(sp)
	char        c1 = (char)(c & 0xff);
    return write(STDOUT_FILENO,&c1,1);
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);
   10628:	d9000005 	stb	r4,0(sp)
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
   1062c:	2021883a 	mov	r16,r4
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);

    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
   10630:	01000074 	movhi	r4,1
   10634:	000f883a 	mov	r7,zero
   10638:	01800044 	movi	r6,1
   1063c:	d80b883a 	mov	r5,sp
   10640:	21032604 	addi	r4,r4,3224
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
   10644:	dfc00215 	stw	ra,8(sp)
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);

    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
   10648:	00106f40 	call	106f4 <altera_avalon_jtag_uart_write>
   1064c:	00ffffc4 	movi	r3,-1
   10650:	10c00126 	beq	r2,r3,10658 <alt_putchar+0x38>
        return -1;
    }
    return c;
   10654:	8005883a 	mov	r2,r16
#else
    return putchar(c);
#endif
#endif
}
   10658:	dfc00217 	ldw	ra,8(sp)
   1065c:	dc000117 	ldw	r16,4(sp)
   10660:	dec00304 	addi	sp,sp,12
   10664:	f800283a 	ret

00010668 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   10668:	deffff04 	addi	sp,sp,-4
   1066c:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
   10670:	00109780 	call	10978 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   10674:	00800044 	movi	r2,1
   10678:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   1067c:	dfc00017 	ldw	ra,0(sp)
   10680:	dec00104 	addi	sp,sp,4
   10684:	f800283a 	ret

00010688 <alt_sys_init>:

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   10688:	01000074 	movhi	r4,1
   1068c:	d1600204 	addi	r5,gp,-32760
   10690:	21030504 	addi	r4,r4,3092
   10694:	00108941 	jmpi	10894 <alt_dev_llist_insert>

00010698 <altera_avalon_jtag_uart_read>:

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
  unsigned int base = sp->base;
   10698:	21000017 	ldw	r4,0(r4)

  char * ptr = buffer;
  char * end = buffer + space;
   1069c:	298d883a 	add	r6,r5,r6

  while (ptr < end)
   106a0:	2805883a 	mov	r2,r5

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
    else if(flags & O_NONBLOCK)
   106a4:	3a10000c 	andi	r8,r7,16384
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
   106a8:	11800b2e 	bgeu	r2,r6,106d8 <altera_avalon_jtag_uart_read+0x40>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   106ac:	20c00037 	ldwio	r3,0(r4)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
   106b0:	1a60000c 	andi	r9,r3,32768
   106b4:	48000326 	beq	r9,zero,106c4 <altera_avalon_jtag_uart_read+0x2c>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   106b8:	10c00005 	stb	r3,0(r2)
   106bc:	10800044 	addi	r2,r2,1
   106c0:	003ff906 	br	106a8 <__alt_data_end+0xffff06a8>
    else if (ptr != buffer)
   106c4:	11400226 	beq	r2,r5,106d0 <altera_avalon_jtag_uart_read+0x38>
      break;   
    
  }

  if (ptr != buffer)
    return ptr - buffer;
   106c8:	1145c83a 	sub	r2,r2,r5
   106cc:	f800283a 	ret

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
    else if(flags & O_NONBLOCK)
   106d0:	403ff526 	beq	r8,zero,106a8 <__alt_data_end+0xffff06a8>
   106d4:	00000106 	br	106dc <altera_avalon_jtag_uart_read+0x44>
      break;   
    
  }

  if (ptr != buffer)
   106d8:	117ffb1e 	bne	r2,r5,106c8 <__alt_data_end+0xffff06c8>
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
   106dc:	39d0000c 	andi	r7,r7,16384
   106e0:	3800021e 	bne	r7,zero,106ec <altera_avalon_jtag_uart_read+0x54>
    return -EWOULDBLOCK;
  else
    return -EIO;
   106e4:	00bffec4 	movi	r2,-5
   106e8:	f800283a 	ret
  }

  if (ptr != buffer)
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
   106ec:	00bffd44 	movi	r2,-11
  else
    return -EIO;
}
   106f0:	f800283a 	ret

000106f4 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
   106f4:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   106f8:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
   106fc:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   10700:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
   10704:	2980072e 	bgeu	r5,r6,10724 <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   10708:	38c00037 	ldwio	r3,0(r7)
   1070c:	18ffffec 	andhi	r3,r3,65535
   10710:	183ffc26 	beq	r3,zero,10704 <__alt_data_end+0xffff0704>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
   10714:	28c00007 	ldb	r3,0(r5)
   10718:	20c00035 	stwio	r3,0(r4)
   1071c:	29400044 	addi	r5,r5,1
   10720:	003ff806 	br	10704 <__alt_data_end+0xffff0704>

  return count;
}
   10724:	f800283a 	ret

00010728 <alt_up_accelerometer_spi_open_dev>:
{
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_accelerometer_spi_dev *dev = (alt_up_accelerometer_spi_dev*)alt_find_dev(name, &alt_dev_list);
   10728:	d1600204 	addi	r5,gp,-32760
   1072c:	00109001 	jmpi	10900 <alt_find_dev>

00010730 <alt_up_accelerometer_spi_read_address_register>:
 * @return 0 for success 
 **/
int alt_up_accelerometer_spi_read_address_register(alt_up_accelerometer_spi_dev *accel_spi, alt_u8 *addr)
{
	// reads data from the device Address register
	*(addr) = IORD_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base); 
   10730:	20800a17 	ldw	r2,40(r4)
   10734:	10800023 	ldbuio	r2,0(r2)
   10738:	28800005 	stb	r2,0(r5)

	return 0;
}
   1073c:	0005883a 	mov	r2,zero
   10740:	f800283a 	ret

00010744 <alt_up_accelerometer_spi_read>:
 * @return 0 for success
 **/
int alt_up_accelerometer_spi_read(alt_up_accelerometer_spi_dev *accel_spi, alt_u8 addr, alt_u8 *data)
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, addr & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   10744:	20800a17 	ldw	r2,40(r4)
   10748:	29400fcc 	andi	r5,r5,63
   1074c:	11400025 	stbio	r5,0(r2)

	// read data to the device Data register
	*(data) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   10750:	20800a17 	ldw	r2,40(r4)
   10754:	10800063 	ldbuio	r2,1(r2)
   10758:	30800005 	stb	r2,0(r6)

	return 0;
}
   1075c:	0005883a 	mov	r2,zero
   10760:	f800283a 	ret

00010764 <alt_up_accelerometer_spi_write>:
 * @return 0 for success
 **/
int alt_up_accelerometer_spi_write(alt_up_accelerometer_spi_dev *accel_spi, alt_u8 addr, alt_u8 data)
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, addr & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   10764:	20800a17 	ldw	r2,40(r4)
   10768:	29400fcc 	andi	r5,r5,63
   1076c:	11400025 	stbio	r5,0(r2)

	// write data to the device Data register
	IOWR_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base, data & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK); 
   10770:	20800a17 	ldw	r2,40(r4)
   10774:	11800065 	stbio	r6,1(r2)

	return 0;
}
   10778:	0005883a 	mov	r2,zero
   1077c:	f800283a 	ret

00010780 <alt_up_accelerometer_spi_read_x_axis>:
 * @return 0 for success or -1 for failure
 **/
int alt_up_accelerometer_spi_read_x_axis(alt_up_accelerometer_spi_dev *accel_spi, alt_32 *x_axis)
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_X_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   10780:	20800a17 	ldw	r2,40(r4)
   10784:	00c00c84 	movi	r3,50
   10788:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(x_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   1078c:	20800a17 	ldw	r2,40(r4)
   10790:	10800063 	ldbuio	r2,1(r2)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_X_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   10794:	00c00cc4 	movi	r3,51
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_X_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 

	// read data to the device Data register
	*(x_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   10798:	10803fcc 	andi	r2,r2,255
   1079c:	28800015 	stw	r2,0(r5)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_X_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   107a0:	20800a17 	ldw	r2,40(r4)
   107a4:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(x_axis) += (IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK) << 8;
   107a8:	20800a17 	ldw	r2,40(r4)
   107ac:	10800063 	ldbuio	r2,1(r2)
   107b0:	10803fcc 	andi	r2,r2,255
   107b4:	1006923a 	slli	r3,r2,8
   107b8:	28800017 	ldw	r2,0(r5)
   107bc:	1885883a 	add	r2,r3,r2

	if (*(x_axis) & 0x00008000)
   107c0:	10e0000c 	andi	r3,r2,32768
   107c4:	18000126 	beq	r3,zero,107cc <alt_up_accelerometer_spi_read_x_axis+0x4c>
	{
		*(x_axis) |= 0xFFFF0000;
   107c8:	10bffff4 	orhi	r2,r2,65535
   107cc:	28800015 	stw	r2,0(r5)
	}

	return 0;
}
   107d0:	0005883a 	mov	r2,zero
   107d4:	f800283a 	ret

000107d8 <alt_up_accelerometer_spi_read_y_axis>:
 * @return 0 for success or -1 for failure
 **/
int alt_up_accelerometer_spi_read_y_axis(alt_up_accelerometer_spi_dev *accel_spi, alt_32 *y_axis)
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Y_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   107d8:	20800a17 	ldw	r2,40(r4)
   107dc:	00c00d04 	movi	r3,52
   107e0:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(y_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   107e4:	20800a17 	ldw	r2,40(r4)
   107e8:	10800063 	ldbuio	r2,1(r2)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Y_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   107ec:	00c00d44 	movi	r3,53
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Y_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 

	// read data to the device Data register
	*(y_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   107f0:	10803fcc 	andi	r2,r2,255
   107f4:	28800015 	stw	r2,0(r5)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Y_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   107f8:	20800a17 	ldw	r2,40(r4)
   107fc:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(y_axis) += (IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK) << 8;
   10800:	20800a17 	ldw	r2,40(r4)
   10804:	10800063 	ldbuio	r2,1(r2)
   10808:	10803fcc 	andi	r2,r2,255
   1080c:	1006923a 	slli	r3,r2,8
   10810:	28800017 	ldw	r2,0(r5)
   10814:	1885883a 	add	r2,r3,r2

	if (*(y_axis) & 0x00008000)
   10818:	10e0000c 	andi	r3,r2,32768
   1081c:	18000126 	beq	r3,zero,10824 <alt_up_accelerometer_spi_read_y_axis+0x4c>
	{
		*(y_axis) |= 0xFFFF0000;
   10820:	10bffff4 	orhi	r2,r2,65535
   10824:	28800015 	stw	r2,0(r5)
	}

	return 0;
}
   10828:	0005883a 	mov	r2,zero
   1082c:	f800283a 	ret

00010830 <alt_up_accelerometer_spi_read_z_axis>:
 * @return 0 for success or -1 for failure
 **/
int alt_up_accelerometer_spi_read_z_axis(alt_up_accelerometer_spi_dev *accel_spi, alt_32 *z_axis)
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Z_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   10830:	20800a17 	ldw	r2,40(r4)
   10834:	00c00d84 	movi	r3,54
   10838:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(z_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   1083c:	20800a17 	ldw	r2,40(r4)
   10840:	10800063 	ldbuio	r2,1(r2)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Z_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   10844:	00c00dc4 	movi	r3,55
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Z_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 

	// read data to the device Data register
	*(z_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   10848:	10803fcc 	andi	r2,r2,255
   1084c:	28800015 	stw	r2,0(r5)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Z_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   10850:	20800a17 	ldw	r2,40(r4)
   10854:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(z_axis) += (IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK) << 8;
   10858:	20800a17 	ldw	r2,40(r4)
   1085c:	10800063 	ldbuio	r2,1(r2)
   10860:	10803fcc 	andi	r2,r2,255
   10864:	1006923a 	slli	r3,r2,8
   10868:	28800017 	ldw	r2,0(r5)
   1086c:	1885883a 	add	r2,r3,r2

	if (*(z_axis) & 0x00008000)
   10870:	10e0000c 	andi	r3,r2,32768
   10874:	18000126 	beq	r3,zero,1087c <alt_up_accelerometer_spi_read_z_axis+0x4c>
	{
		*(z_axis) |= 0xFFFF0000;
   10878:	10bffff4 	orhi	r2,r2,65535
   1087c:	28800015 	stw	r2,0(r5)
	}

	return 0;
}
   10880:	0005883a 	mov	r2,zero
   10884:	f800283a 	ret

00010888 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   10888:	f800283a 	ret

0001088c <alt_dev_null_write>:
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  return len;
}
   1088c:	3005883a 	mov	r2,r6
   10890:	f800283a 	ret

00010894 <alt_dev_llist_insert>:
{
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   10894:	20000226 	beq	r4,zero,108a0 <alt_dev_llist_insert+0xc>
   10898:	20800217 	ldw	r2,8(r4)
   1089c:	1000101e 	bne	r2,zero,108e0 <alt_dev_llist_insert+0x4c>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
   108a0:	d0a00617 	ldw	r2,-32744(gp)
   108a4:	10000926 	beq	r2,zero,108cc <alt_dev_llist_insert+0x38>
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   108a8:	deffff04 	addi	sp,sp,-4
   108ac:	dfc00015 	stw	ra,0(sp)
   108b0:	103ee83a 	callr	r2
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  {
    ALT_ERRNO = EINVAL;
   108b4:	00c00584 	movi	r3,22
   108b8:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
   108bc:	00bffa84 	movi	r2,-22
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
   108c0:	dfc00017 	ldw	ra,0(sp)
   108c4:	dec00104 	addi	sp,sp,4
   108c8:	f800283a 	ret
   108cc:	d0a03204 	addi	r2,gp,-32568
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  {
    ALT_ERRNO = EINVAL;
   108d0:	00c00584 	movi	r3,22
   108d4:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
   108d8:	00bffa84 	movi	r2,-22
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
   108dc:	f800283a 	ret

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  entry->next     = list->next;
   108e0:	28800017 	ldw	r2,0(r5)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   108e4:	21400115 	stw	r5,4(r4)
  entry->next     = list->next;
   108e8:	20800015 	stw	r2,0(r4)

  list->next->previous = entry;
   108ec:	28800017 	ldw	r2,0(r5)
   108f0:	11000115 	stw	r4,4(r2)
  list->next           = entry;
   108f4:	29000015 	stw	r4,0(r5)
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
   108f8:	0005883a 	mov	r2,zero
   108fc:	f800283a 	ret

00010900 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   10900:	defffb04 	addi	sp,sp,-20
   10904:	dcc00315 	stw	r19,12(sp)
   10908:	dc800215 	stw	r18,8(sp)
   1090c:	dc400115 	stw	r17,4(sp)
   10910:	dc000015 	stw	r16,0(sp)
   10914:	dfc00415 	stw	ra,16(sp)
   10918:	2027883a 	mov	r19,r4
   1091c:	2823883a 	mov	r17,r5
  alt_dev* next = (alt_dev*) llist->next;
   10920:	2c000017 	ldw	r16,0(r5)
  alt_32 len;

  len  = strlen(name) + 1;
   10924:	00109b00 	call	109b0 <strlen>
   10928:	14800044 	addi	r18,r2,1
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   1092c:	84400726 	beq	r16,r17,1094c <alt_find_dev+0x4c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   10930:	81000217 	ldw	r4,8(r16)
   10934:	900d883a 	mov	r6,r18
   10938:	980b883a 	mov	r5,r19
   1093c:	00109800 	call	10980 <memcmp>
   10940:	10000426 	beq	r2,zero,10954 <alt_find_dev+0x54>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
   10944:	84000017 	ldw	r16,0(r16)
   10948:	003ff806 	br	1092c <__alt_data_end+0xffff092c>
  }
  
  /* No match found */
  
  return NULL;
   1094c:	0005883a 	mov	r2,zero
   10950:	00000106 	br	10958 <alt_find_dev+0x58>
   10954:	8005883a 	mov	r2,r16
}
   10958:	dfc00417 	ldw	ra,16(sp)
   1095c:	dcc00317 	ldw	r19,12(sp)
   10960:	dc800217 	ldw	r18,8(sp)
   10964:	dc400117 	ldw	r17,4(sp)
   10968:	dc000017 	ldw	r16,0(sp)
   1096c:	dec00504 	addi	sp,sp,20
   10970:	f800283a 	ret

00010974 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   10974:	f800283a 	ret

00010978 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
   10978:	000170fa 	wrctl	ienable,zero
   1097c:	f800283a 	ret

00010980 <memcmp>:
   10980:	218d883a 	add	r6,r4,r6
   10984:	21800826 	beq	r4,r6,109a8 <memcmp+0x28>
   10988:	20800003 	ldbu	r2,0(r4)
   1098c:	28c00003 	ldbu	r3,0(r5)
   10990:	10c00226 	beq	r2,r3,1099c <memcmp+0x1c>
   10994:	10c5c83a 	sub	r2,r2,r3
   10998:	f800283a 	ret
   1099c:	21000044 	addi	r4,r4,1
   109a0:	29400044 	addi	r5,r5,1
   109a4:	003ff706 	br	10984 <__alt_data_end+0xffff0984>
   109a8:	0005883a 	mov	r2,zero
   109ac:	f800283a 	ret

000109b0 <strlen>:
   109b0:	2005883a 	mov	r2,r4
   109b4:	10c00007 	ldb	r3,0(r2)
   109b8:	18000226 	beq	r3,zero,109c4 <strlen+0x14>
   109bc:	10800044 	addi	r2,r2,1
   109c0:	003ffc06 	br	109b4 <__alt_data_end+0xffff09b4>
   109c4:	1105c83a 	sub	r2,r2,r4
   109c8:	f800283a 	ret
